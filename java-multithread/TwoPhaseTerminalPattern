1. Runtime.getRuntime().addShutdownHook
//程序终止后执行ShutdownHook

2.TwoPhaseTerminate 的安全性，生命性和响应性
（ngixn -s stop)

3. Thread.interrupted() //检查Thread.currentThread()的中断状态
Thread.currentThread().isInterrupted() //不改变中断状态

4. Thread jion()会进程进入等待状态，大家一起干完活儿再出发

public class Main {
    public static void main(String[] args){
        System.out.println(" main begin");
        try{
            CountupThread t = new CountupThread();
            t.start();

            Thread.sleep(10000);

            System.out.println("main: shutdown request");
            t.shutdownRequest();


            System.out.println("main join");

            //waiting thread to die
            t.join();
        }catch (Exception e){

        }
        System.out.println(" main end");
    }
}



public class CountupThread extends Thread {
    private int counter = 0;
    private volatile boolean shutdownRequested;

    public void shutdownRequest(){
        shutdownRequested = true;
        interrupt();
    }

    public boolean isShutdownRequested() {
        return shutdownRequested;
    }

    @Override
    public final void run() {
        try{
            while (!shutdownRequested ){
                doWork();
            }
        }catch (Exception e){

        }finally {
            doShutdown();
        }
    }

//下面两个方法用protected , 以便子类可以重用
    protected void doWork() throws InterruptedException{
        counter++;
        System.out.println(" doWork ,counter:" + counter);
        Thread.sleep(500);
    }

    protected void doShutdown(){
        System.out.println("shutdown, counter :" + counter);
    }
}


