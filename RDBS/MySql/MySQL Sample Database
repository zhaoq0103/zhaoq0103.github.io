MySQL Sample Database


一个表就是一个类，
每条数据就是类的一个实例，
把这个类和类的实例持9化就是存到DB中

use employees; //使用这个类
1.SELECT
select * from employees; //查询这个类的所有实例信息

2.order by
ORDER BY
    column1 ASC,
    column2 DESC;

    First, sort the result set by the values in the column1 in ascending order.
    Then, sort the sorted result set by the values in the column2  in descending order. Note that the order of values in the column1 will not change in this step, only the order of values in the column2 changes.

排序中的稳定排序，先按某字段排，再按第二字段重排

SELECT
    orderNumber,
    orderlinenumber,
    quantityOrdered * priceEach as t 
FROM
    orderdetails
ORDER BY
   t DESC;



The column alias can be used in the ORDER BY clause because the SELECT clause is evaluated before the ORDER BY clause. By the time the ORDER BY clause is evaluated, the column alias is accessible.


SELECT
    orderNumber,
    status
FROM
    orders
ORDER BY
    FIELD(status,
        'In Process',
        'On Hold',
        'Cancelled',
        'Resolved',
        'Disputed',
        'Shipped');

3. WHERE //查询符合某些条件的类实例
SELECT
    firstName,
    lastName,
    officeCode
FROM
    employees
WHERE
    officeCode BETWEEN 1 AND 3
ORDER BY officeCode;

4.SELECT DISTINCT //去重
DISTINCT clause vs. GROUP BY clause
If you use the GROUP BY clause in the SELECT statement without using aggregate functions, the GROUP BY clause behaves like the DISTINCT clause.

select count(*), state from customers group by state order by state;
select count(distinct state), distinct state from customers order by state;

Generally speaking, the DISTINCT clause is a special case of the GROUP BY clause. The difference between DISTINCT clause and GROUP BY clause is that the GROUP BY clause sorts the result set whereas the DISTINCT clause does not.

Notice that MySQL 8.0 removed the implicit sorting for the GROUP BY clause. Therefore, if you use MySQL 8.0+, you will find that the result set of the above query with the GROUP BY clause is not sorted.

If you add the ORDER BY clause to the statement that uses the  DISTINCT clause, the result set is sorted and it is the same as the one returned by the statement that uses GROUP BY clause.


find the orders whose total values are greater than 60,000：
wrong:
select orderNumber,status,customerNumber from orders
where orderNumber in (
	//同一个定单有detail记录，下面语句只统计了一条，先学习一下having再回来看
	select orderNumber from orderdetails where quantityOrdered*priceEach > 60,000;
);
right:
SELECT    
    orderNumber,
    customerNumber,
    status,
    shippedDate
FROM    
    orders
WHERE orderNumber IN
(
     SELECT
         orderNumber
     FROM
         orderDetails
     GROUP BY
         orderNumber
     HAVING SUM(quantityOrdered * priceEach) > 60000
);


select orderNumber from orderdetails

select count(*), orderNumber,sum(quantityOrdered * priceEach) as total from orderdetails 
group by orderNumber order by total;



select count(*), distinct orderNumber,sum(quantityOrdered * priceEach) as total from orderdetails 
order by total;

select count(orderNumber) , sum(quantityOrdered * priceEach) as total,orderNumber from orderdetails group by orderNumber order by total;

select * from orderdetails where sum(quantityOrdered * priceEach) > 60000;
1111 - Invalid use of group function


这里还没有深刻理解

5. between
expr [NOT] BETWEEN begin_expr AND end_expr;
expr,  begin_expr, and  end_expr must have the same data type.

SELECT
   orderNumber,
   requiredDate,
   status
FROM
   orders
WHERE
   requireddate BETWEEN
     CAST('2003-01-01' AS DATE) AND
     CAST('2003-01-31' AS DATE);

6.LIMIT
SELECT
    select_list
FROM
    table_name
LIMIT [offset,] row_count;

7. is null  //sql中的注释 --
SELECT 1 IS NULL,  -- 0
       0 IS NULL,  -- 0
       NULL IS NULL; -- 1     


mysql全局变量:
//这个相当于程序中的全局静态常量

SHOW GLOBAL VARIABLES;
SET GLOBAL xxx=yyy;
SHOW GLOBAL VARIABLES LIKE "%null%";//没有查到数据,有不可见字符，还不清楚是不是输入法引起的
SHOW GLOBAL VARIABLES LIKE "%null%";
SHOW VARIABLES LIKE '%null%'; 

SHOW GLOBAL VARIABLES LIKE 'wait_timeout'
SELECT @@wait_timeout

mysql会给哪些column建立索引index?
mysql的索引还要了解一下


8.alias
SELECT
    orderNumber `Order no.`,
    SUM(priceEach * quantityOrdered) total
FROM
    orderDetails
GROUP BY
    `Order no.`
HAVING
    total > 60000;

SELECT
    customerName,
    COUNT(o.orderNumber) total
FROM
    customers c
INNER JOIN orders o ON c.customerNumber = o.customerNumber
GROUP BY
    customerName
ORDER BY
    total DESC;

定单量从高到低前10名人员和定单量：
select count(customerNumber) as t, from orders group by customerNumber order by t desc limit 10;

不会写1：
select count(customerNumber) as t, customers.customerName 
from orders as o on o.customerNumber = customers.customerNumber
group by customerNumber order by t desc 
limit 10;

不会写2：
select count(o.customerNumber) as t, c.customerName 
from orders as o, customers as c on o.customerNumber = c.customerNumber
group by c.customerName order by t desc limit 10;

示例：
SELECT
    customerName,
    COUNT(o.orderNumber) total
FROM
    customers c
INNER JOIN orders o ON c.customerNumber = o.customerNumber
GROUP BY
    customerName
ORDER BY
    total DESC;


9. join
    Inner join
    Left join
    Right join
    Cross join

9.1 Inner join：

select o.customerNumber, c.customerName 
from orders  o inner join customers  c on o.customerNumber = c.customerNumber;


SELECT
    m.member_id,
    m.name as member,
    c.committee_id,
    c.name as committee
FROM
    members m
INNER JOIN committees c
    ON c.name = m.name;



SELECT
    m.member_id,
    m.name as member,
    c.committee_id,
    c.name as committee
FROM
    members m
INNER JOIN committees c
    using(name);


SELECT
	count(t1.orderNumber) orderNum,
    t1.orderNumber,
    t1.status,
    SUM(t2.quantityOrdered * t2.priceEach) total
FROM
    orders t1
INNER JOIN orderdetails t2
    ON t1.orderNumber = t2.orderNumber
GROUP BY t1.orderNumber;

//group by 是按某列分组
//如果没有group by,count就会把结果集成一条
//sum 也是如些， count,sum 这类函数都是 aggregate funtion

还是没有搞清楚group by的机制，不GROUP BY为什么只有一条记录？
group by的算法是什么？ 
sum()等函数的影响？


9.2 left join
SELECT
    m.member_id,
    m.name member,
    c.committee_id,
    c.name committee
FROM
    members m
LEFT JOIN committees c on m.name=c.name;


SELECT
    customers.customerNumber,
    customerName,
    orderNumber,
    status,
    count(orders.orderNumber)
FROM
    customers
left JOIN orders ON
    orders.customerNumber = customers.customerNumber
group by  customers.customerNumber;   




SELECT
    customers.customerNumber,
    customerName,
    orderNumber,
    status,
    count(orders.orderNumber) t
FROM
    customers
left JOIN orders ON
    orders.customerNumber = customers.customerNumber
    group by customers.customerNumber 
    order by t desc;

//283条数据
SELECT
    lastName,
    firstName,
    customerName,
    checkNumber,
    amount
FROM
    employees
LEFT JOIN customers ON
    employeeNumber = salesRepEmployeeNumber
LEFT JOIN payments ON
    payments.customerNumber = customers.customerNumber
ORDER BY
    customerName,
    checkNumber;



SELECT
    lastName,
    firstName,
    customerName
FROM
    employees
LEFT JOIN customers ON
    employeeNumber = salesRepEmployeeNumber
ORDER BY
    customerName;



Notice that for INNER JOIN clause, the condition in the ON clause is equivalent to the condition in the WHERE clause.
but for Left join, It will have a different meaning.


9.3 self join
To perform a self join, you must use table aliases 

SELECT
    CONCAT(m.lastName, ', ', m.firstName) AS Manager,
    CONCAT(e.lastName, ', ', e.firstName) AS 'Direct report'
FROM
    employees e
INNER JOIN employees m ON
    m.employeeNumber = e.reportsTo
ORDER BY
    Manager;

9.4 CROSS JION

select store_name,product_name,(p.price*sa.quantity) as saleout
from sales sa
inner join products p
on sa.product_id = p.id
group by sa.store_id;


select st.store_name,p.product_name,ifnull(c.revenue,0) as revenue
from stores as st 
cross join products as p 
left join 
( 
	select inst.id as store_id, inp.id as product_id,inp.product_name,inst.store_name, ROUND(SUM(ins.quantity * inp.price), 0) AS revenue 
	from sales as ins
	inner join products as inp on ins.product_id=inp.id
	inner join stores as inst on ins.store_id=inst.id
	group by inst.store_name,inp.product_name
) as c on c.store_id=st.id and c.product_id=p.id order by st.store_name;

9.5 group by
aggregate functions such as SUM, AVG, MAX, MIN, and COUNT
MySQL evaluates the GROUP BY clause after the FROM, WHERE and SELECT clauses and before the HAVING , ORDER BY and LIMIT clause


To filter the groups returned by GROUP BY clause, you use a  HAVING clause：
SELECT
    YEAR(orderDate) AS year,
    SUM(quantityOrdered * priceEach) AS total
FROM
    orders
INNER JOIN orderdetails
    USING (orderNumber)
WHERE
    status = 'Shipped'
GROUP BY
    year
HAVING
    year > 2003;


9.6 ROLLUP， GROUPING()
subtotals and grand totals

SELECT
    productline,
    SUM(orderValue) totalOrderValue
FROM
    sales
GROUP BY
    productline
UNION ALL
SELECT
    NULL,
    SUM(orderValue) totalOrderValue
FROM
    sales;


problems:
1.The query is quite lengthy.
2.The performance of the query may not be good since the database engine has to internally execute two separate queries and combine the result sets into one.    


SELECT
    productLine,
    SUM(orderValue) totalOrderValue
FROM
    sales
GROUP BY
    productline WITH ROLLUP;


10. 子查询（类似面向对象中的builder模式）
11. Derived Table （不想继续了，先暂停一下）
http://www.mysqltutorial.org/mysql-derived-table/


Derived Tables













































