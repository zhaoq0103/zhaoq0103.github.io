树：高度，深度，层

二叉树
满二叉树，完全二叉树


存储一棵二叉树，我们有两种方法，
一种是基于指针或者引用的二叉链式存储法，
一种是基于数组的顺序存储法。

完全二叉树适合用数组存储，（堆就是一种完全二叉树）

以"根"节点为参考，左右始终位置固定，
根在左，则前序；
根在中，则中序；
根在右，则后序；
前序遍历：根-左-右
中序遍历：左-根-右
后序遍历：左-右-根

二叉查找树（二叉排序树）Binary Search Tree
在树中的任意一个节点，
其左子树中的每个节点的值，
都要小于这个这个节点的值，
而右子树节点的值都大于这个节点的值

二叉查找树中序遍历是有序的。。

平衡二叉树
平衡二叉查找树:(红黑树是平衡二叉查找树的一种）

平衡二叉树的严格定义是这样的：
二叉树中任意一个节点的左右子树的高度相差不能大于 1

红黑树R-B Tree：
1.根节点是黑色的
2.每个叶子节点都是黑色的空节点（NIL），叶子节点不存储数据；
3.任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的
4.每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点

参考资料：（2-3-4树）
https://www.cnblogs.com/tiancai/p/9072813.html


递归树
用来做递归代码的复杂度分析


1.堆是完全二叉树
2.堆中的每个节点的值必须大于等于（或者小于等于）其子树中每个节点的值
3.
面向对象语言中的优先队列，
如Java 的 PriorityQueue，C++中的priority_queue就是用堆实现的

4.
堆这种数据结构几个非常重要的应用：
优先级队列、求 Top K和求中位数（50%， 99%等）