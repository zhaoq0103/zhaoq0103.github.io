一。二分查找
容易出错的细节：
终止条件、区间上下界更新方法、返回值选择


二。跳表
巧妙之处：多个链表（索引和原链表）的批量操作，引入update[i]作记录
三。Hash Table

散列函数的设计：
1. 散列函数计算得到的散列值是一个非负整数
2.如果key1=key2, 则hash(key1) == hash(key2)
3.如果key1!=key2, 则hash(key1) != hash(key2)

散列冲突的解决方案:
1.开放寻址法：（线性寻址，二次探测，双重散列） open addressing
2. 链表法：chaining
装载因子越大，说明空闲位置越少，冲突越多，散列表的性能会下降


工业级散列表的实现：
Java中的HashMap
散列函数：
int hash(Object key) {
    int h = key.hashCode()；
    return (h ^ (h >>> 16)) & (capitity -1); //capicity 表示散列表的大小
}

java的移位运算符：
主要包括：左移位运算符（<<）、右移位运算符（>>>）、带符号的右移位运算符（>>）

LRU:
增，删，查
散列表和链表两种数据结构组合（没理解）
LinkedHashMap（和LRU的实现原理相同）



最常见的七个哈希算法的应用，
分别是安全加密、唯一标识、数据校验、散列函数（散列表）、
负载均衡、数据分片、分布式存储


一致性哈希算法（防止雪崩效应）
虚拟节点等，可以百度相关资料