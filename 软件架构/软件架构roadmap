软件架构路线图
	01-基础平台
	02-前端开发
	03-服务端开发 （单独一章）
	04-服务治理与架构思维
		宏观视角 - 有些难以理解，参考 https://time.geekbang.org/column/article/144803
			已知的、重复性的工作有一种让人平静的功效，可以带来一种满足感和快速胜利感 
			-- 你看，为什么有人喜欢做家务，是有理论依据的。但是事务性工作不利于职业发展
			所以，事务性工作，最好工程化；

		业务导向的公司才是健康的公司；
		工程师思维：
			DON'T REPEAT YOURSELF! 
			某件重复发生的事情只干一次就好，以后也不需要再重复做。

		工程师文件： 把问题以一种自动化的方式解决
			做新媒体运营，每天写着不同的公众号文章，这是否代表我在做新的事情？
			答案显然是不一定。
			要回答这个问题，我们首先需要搞清楚的是，我每天发公众号文章，是在解决一个什么样的问题。
			如果我们没有想清楚这一点，那么我们就不是在 Close 问题，我们只是在做任务而已。
			我们的目标显然不应该是每天发一篇文章。
			这是在定义一件事务，而不是定义一个目标。
			把问题定义清楚非常非常重要。
			清楚了问题，就是设定清楚了我们的目标。然后才能谈得上去彻底解决掉它。

		发布与升级
			变更是故障之源
			发布哲学：密闭性与可重复性,从自动化到自服务(少量发布、频繁发布),重视质量尊重流程,配置管理
		日志、监控与报警
			工程化
			 参考 
			 	https://blog.csdn.net/weixin_44761091/article/details/126537227 
			 	https://blog.csdn.net/weixin_38550182/article/details/112596645
			 	https://www.w3cschool.cn/pbikc/pbikc-u62f37bc.html
			 日志：时序数据库
			 添加监控项：4 个黄金指标 - 延迟、流量、错误和饱和度
			     饱和度 - 负载测试，评判服务的饱和度




	软件工程



	不需要大而全，每个小知识点总结成一篇

	数据结构和算法放在什么位置？
	网络放在什么位置？
	安全放在什么位置？



#系统架构阶段
	需求分析阶段: 确定角色-系统的各类参与方，以及角色间的交互方式
	概要设计阶段: 以子系统为维度来阐述系统各个角色之间的关系，关键子系统要确定子模块的职责和接口 （确定流程的可行性）
	详细设计阶段: 
		现状与需求
		需求满足方式： 接口描述的完备性是必需的。使用界面需要有明确的书写规范。接口的变更需谨慎！！
		实现：数据结构 + 算法  ：  （桌面程序大部分是基于内存的数据结构，服务端一般是指数据库的表结构设计）
			 表结构比内存数据结构多了一个概念：索引
			 如何描述一个算法：1）UML 时序图（Sequence Diagram） 2）伪代码（Pseudo Code）



#网络：
	ssh的应用（试一下VPN的工作原理）
	https://blog.csdn.net/qq_38150250/article/details/119835992
	https://www.cnblogs.com/liangjindong/p/9073187.html

	openLDAP服务：统一登录认证服务
	比如内网的工单系统 http://yearning.ops.yeahgo.com/#/home





#正则表达式  -- 正则表达式应该归属于文字处理类的范畴
	两个标准：posix 和 PCRE
		1）其中 posix 标准又分为基础版 BRE 和提高版 ERE, 主要在操作系统中应用，grep , awk, sed
		   这个版本还有NGU BSD两种实现。 macOS是BSD内核，可以 man grep 查看支持的regex方式
		2）PCRE 是Perl 兼容版本，目前主流的编程语言支持的版本，简洁易用。
	参考这篇文章： https://mp.weixin.qq.com/s/OV7H35brWKatni_zRKDq_A


